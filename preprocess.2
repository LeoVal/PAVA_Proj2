#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.12 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 1013 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; the hash table for the active tokens"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"ht"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-hash"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 16 #"add-active-token"
0 0 24 3 1 #" "
0 0 15 3 16 #"def-active-token"
0 0 24 3 1 #" "
0 0 14 3 14 #"process-string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; the add active token function"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"add-active-token"
0 0 24 3 1 #" "
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 14 3 8 #"function"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 67
#";; receives the token and the function and adds it to the hashtable"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"ht"
0 0 24 3 1 #" "
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 14 3 8 #"function"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; defines the syntax rules to use the def-active-token"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 24 3 1 #" "
0 0 15 3 16 #"def-active-token"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 12 #"syntax-rules"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 15 3 16 #"def-active-token"
0 0 24 3 1 #" "
0 0 14 3 5 #"token"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"add-active-token"
0 0 24 3 1 #" "
0 0 14 3 5 #"token"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; processes the string with the active tokens"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"process-string"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"keys"
0 0 24 3 2 #" ("
0 0 14 3 9 #"hash-keys"
0 0 24 3 1 #" "
0 0 14 3 2 #"ht"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 6 #"result"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-copy"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 4 #"keys"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 2 #" ("
0 0 14 3 19 #"apply-active-tokens"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 2 #"ht"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 2 #") "
0 0 14 3 6 #"result"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 3 #" ) "
0 0 14 3 6 #"result"
0 0 24 3 2 #" ("
0 0 14 3 14 #"process-string"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;Creates a clausure to be used on the hash-for-each with the string"
 #" to be processed in"
) 0 0 24 29 1 #"\n"
0 0 17 3 65
#";; the apply-active-tokens for each token and respective function"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"get-proc-function"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 3 #") ("
0 0 14 3 19 #"apply-active-tokens"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"apply-active-tokens"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #" ("
0 0 14 3 22 #"regexp-match-positions"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 6 #"string"
0 0 24 3 6 #"      "
0 0 17 3 29 #";; no match return the string"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"let*"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 13 #"result-string"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-copy"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 3 #")) "
0 0 17 3 32 #";; to store the formatted string"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 14 #"match-position"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 22 #"regexp-match-positions"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 13 #"result-string"
0 0 24 3 4 #"))) "
0 0 17 3 48 #";; the position of the last match with the token"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 12 #"match-counts"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 23 #"regexp-match-positions*"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 13 #"result-string"
0 0 24 3 4 #"))) "
0 0 17 3 20 #";; number of matches"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           )"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 12 #"match-counts"
0 0 24 3 3 #"]) "
0 0 17 3 22 #";; for i< match-counts"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 14 3 14 #"match-position"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 21 3 2 #"#f"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 17 3 52 #"; (writeln (string-append \" BEFORE \" result-string))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 17 3 96
(
 #";(writeln (string-append \" RESULT: \" (~a (car match-position)) \"a"
 #"nd\" (~a (cdr match-position))))"
) 0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 13 #"result-string"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 13 #"result-string"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 14 #"match-position"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 5 #"value"
0 0 24 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 13 #"result-string"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 14 #"match-position"
0 0 24 3 5 #") )) "
0 0 17 3 40 #";; process the string bettween the match"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                       "
0 0 17 3 49 #";; (substring result-string (cdr match-position))"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       )"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        )"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 14 #"match-position"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 22 #"regexp-match-positions"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 13 #"result-string"
0 0 24 3 2 #")("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 22 #"regexp-match-positions"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 13 #"result-string"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 17 3 50 #";(writeln (string-append \" AFTER \" result-string))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  )"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                )"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            ) "
0 0 17 3 29 #";; aqui obtemos as posi\303\247\303\265es"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 13 #"result-string"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;;; Some regex here"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;: Alias matchers"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; Capture the alias name and the matching expression"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; under the named groups 'aliasName' and 'aliasExpr'"
0 0 24 29 1 #"\n"
0 0 17 3 67
(
 #"; alias[^\\S]+(?<aliasName>[^=\\s]+)[\\s+]*=[\\s+]*(?<aliasExpr>[^;]"
 #"*);"
) 0 0 24 29 1 #"\n"
0 0 17 3 42 #"; example: https://regex101.com/r/XYwvMg/2"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
(
 #";; To detect the alias later we can use \\b to match a word boundary"
 #"."
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";; This example captures both strings between quotes and aliases nam"
 #"ed."
) 0 0 24 29 1 #"\n"
0 0 17 3 94
(
 #";; With some logic we can just ignore the quotes and proceed to repl"
 #"ace the bound word tokens."
) 0 0 24 29 1 #"\n"
0 0 17 3 42 #"; example: https://regex101.com/r/5m6Pir/1"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; test stuff"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 16 #"def-active-token"
0 0 24 3 1 #" "
0 0 19 3 4 #"\";;\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 15 3 6 #"for/or"
0 0 24 3 3 #" (("
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-string"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 11 #"in-naturals"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"char=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 19 3 2 #"\"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 134
(
 #"; (alias-processor \"this alias should survive; maybe this alias=ano"
 #"ther alias?; alias 123 = body; i guess 123 should change to body;\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #"; (alias-processor \"alias 123 = body; alias 234 = anotherbody; whos"
 #" better? 123 or 234?\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 60
#"; (type-inference-processor \"somevar string = new String()\")"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; (type-inference-processor \"some var string = newString()\")"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; (type-inference-processor \"var something = new Something<OtherThi"
 #"ng>()\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 117
(
 #"; (type-inference-processor \"var whitespaces = new     WhiteSpace<P"
 #"arameter, Parameter< Spaced,       Parameter>>()\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 292
(
 #"; (type-inference-processor (alias-processor \"alias someAlias=somet"
 #"hingNew<Parameter>; var variable=new someAlias();\"))   <- Bugged wh"
 #"en alias has a ( character. the () character represent a capture gro"
 #"up and in the first instruction of alias processor the string is not"
 #" striped of this token"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; Process a string and replace the existing alias in it."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 16 #"def-active-token"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"alias\""
0 0 24 3 2 #" ("
0 0 14 3 6 #"string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 21 #"alias-matcher-pattern"
0 0 24 3 1 #" "
0 0 19 3 48
#"#px\"\\\\balias[\\\\s]+([\\\\S]+)[\\\\s]*=[\\\\s]*([^;]+);\""
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 14 #"matched-string"
0 0 24 3 2 #" ("
0 0 14 3 13 #"regexp-match*"
0 0 24 3 1 #" "
0 0 14 3 21 #"alias-matcher-pattern"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 61
#";; take away the matched-string to prevent wrong replacements"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 16 #";(println \"hee\")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 17 #";(println string)"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string-replace"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 1 #" "
0 0 14 3 14 #"matched-string"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 17 #";(println string)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 25 #";; do the actual matching"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 10 #"alias-name"
0 0 24 3 2 #" ("
0 0 14 3 14 #"regexp-replace"
0 0 24 3 1 #" "
0 0 14 3 21 #"alias-matcher-pattern"
0 0 24 3 1 #" "
0 0 14 3 14 #"matched-string"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"\\\\1\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 10 #"alias-expr"
0 0 24 3 2 #" ("
0 0 14 3 14 #"regexp-replace"
0 0 24 3 1 #" "
0 0 14 3 21 #"alias-matcher-pattern"
0 0 24 3 1 #" "
0 0 14 3 14 #"matched-string"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"\\\\2\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 7 #"is-word"
0 0 24 3 2 #" ("
0 0 14 3 12 #"regexp-match"
0 0 24 3 1 #" "
0 0 19 3 13 #"#px\"^[\\\\w]*$\""
0 0 24 3 1 #" "
0 0 14 3 10 #"alias-name"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 18 #"alias-name-pattern"
0 0 24 3 2 #" ("
0 0 14 3 7 #"pregexp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 14 3 7 #"is-word"
0 0 24 3 3 #") ("
0 0 14 3 12 #"regexp-quote"
0 0 24 3 1 #" "
0 0 14 3 10 #"alias-name"
0 0 24 3 3 #") ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"\\\\b~a\\\\b\""
0 0 24 3 2 #" ("
0 0 14 3 12 #"regexp-quote"
0 0 24 3 1 #" "
0 0 14 3 10 #"alias-name"
0 0 24 3 7 #")) ))])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 17 3 114
(
 #";(println alias-name) (println alias-expr) (println alias-name-patte"
 #"rn)  (println matched-string) (println string)"
) 0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string-replace"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 1 #" "
0 0 14 3 18 #"alias-name-pattern"
0 0 24 3 1 #" "
0 0 14 3 10 #"alias-expr"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 6 #"string"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #"; Infer the type of a var keyword and replace it with the type decla"
 #"red ahead"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 16 #"def-active-token"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"var\""
0 0 24 3 2 #" ("
0 0 14 3 6 #"string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 22 #"type-inference-pattern"
0 0 24 3 1 #" "
0 0 19 3 62
(
 #"#px\"\\\\bvar([\\\\s]+[\\\\w]+[\\\\s]*=[\\\\s]*\\\\bnew\\\\b[\\\\s]*"
 #"([^\\\\(]+))\""
) 0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 14 #"matched-string"
0 0 24 3 2 #" ("
0 0 14 3 13 #"regexp-match*"
0 0 24 3 1 #" "
0 0 14 3 22 #"type-inference-pattern"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 12 #"infered-type"
0 0 24 3 2 #" ("
0 0 14 3 14 #"regexp-replace"
0 0 24 3 1 #" "
0 0 14 3 22 #"type-inference-pattern"
0 0 24 3 1 #" "
0 0 14 3 14 #"matched-string"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"\\\\2\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 14 #"statement-body"
0 0 24 3 2 #" ("
0 0 14 3 14 #"regexp-replace"
0 0 24 3 1 #" "
0 0 14 3 22 #"type-inference-pattern"
0 0 24 3 1 #" "
0 0 14 3 14 #"matched-string"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"\\\\1\""
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 17 3 90
(
 #";(println infered-type) (println statement-body) (println matched-st"
 #"ring) (println string)"
) 0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string-replace"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 1 #" "
0 0 14 3 14 #"matched-string"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 12 #"infered-type"
0 0 24 3 1 #" "
0 0 14 3 14 #"statement-body"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 6 #"string"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; String interpolation"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 16 #"def-active-token"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"#\""
0 0 24 3 2 #" ("
0 0 14 3 6 #"string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 22 #"type-inference-pattern"
0 0 24 3 1 #" "
0 0 19 3 18 #"#px\"#\\\"([^\\\"]*)\\\"\""
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 36 #"type-inference-pattern-interpolation"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"#{([^}]+)}\""
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 14 #"matched-string"
0 0 24 3 2 #" ("
0 0 14 3 13 #"regexp-match*"
0 0 24 3 1 #" "
0 0 14 3 22 #"type-inference-pattern"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 14 #"statement-body"
0 0 24 3 2 #" ("
0 0 14 3 14 #"regexp-replace"
0 0 24 3 1 #" "
0 0 14 3 22 #"type-inference-pattern"
0 0 24 3 1 #" "
0 0 14 3 14 #"matched-string"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"\\\\1\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 22 #"statement-body-replica"
0 0 24 3 2 #" ("
0 0 14 3 14 #"regexp-replace"
0 0 24 3 1 #" "
0 0 14 3 22 #"type-inference-pattern"
0 0 24 3 1 #" "
0 0 14 3 14 #"matched-string"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"\\\\1\""
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 25 #"matched-interpolation-var"
0 0 24 3 2 #" ("
0 0 14 3 13 #"regexp-match*"
0 0 24 3 1 #" "
0 0 14 3 36 #"type-inference-pattern-interpolation"
0 0 24 3 1 #" "
0 0 14 3 14 #"statement-body"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 13 #"statement-var"
0 0 24 3 2 #" ("
0 0 14 3 14 #"regexp-replace"
0 0 24 3 1 #" "
0 0 14 3 36 #"type-inference-pattern-interpolation"
0 0 24 3 1 #" "
0 0 14 3 25 #"matched-interpolation-var"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"\\\\1\""
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 14 #"statement-body"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"string-replace"
0 0 24 3 1 #" "
0 0 14 3 14 #"statement-body"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#{\""
0 0 24 3 1 #" "
0 0 14 3 13 #"statement-var"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"\\\" + (\""
0 0 24 3 1 #" "
0 0 14 3 13 #"statement-var"
0 0 24 3 1 #" "
0 0 19 3 8 #"\") + \\\"\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  )"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                )"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              )"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string-replace"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"#\\\"\""
0 0 24 3 1 #" "
0 0 14 3 22 #"statement-body-replica"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\\"\""
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\\"\""
0 0 24 3 1 #" "
0 0 14 3 14 #"statement-body"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\\"\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            )"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          ) "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 6 #"string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; String interpolation"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 16 #"def-active-token"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"#include\""
0 0 24 3 2 #" ("
0 0 14 3 6 #"string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";(process-string \"dads ;; dsads"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";dsa d\")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"ns"
0 0 24 3 2 #" ("
0 0 14 3 19 #"make-base-namespace"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 16 #"def-active-token"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"//eval \""
0 0 24 3 2 #" ("
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 22 #"call-with-input-string"
0 0 24 29 1 #"\n"
0 0 14 3 3 #"str"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~a"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 4 #"read"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 3 2 #") "
0 0 14 3 2 #"ns"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"port->string"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";(process-string \"if (curYear > //eval (date-year (seconds->date (c"
 #"urrent-seconds)))) {\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 63
#";(process-string \"var something = new Something<OtherThing>()\")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"process-string"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"public class Foo {"
0 0 19 29 1 #"\n"
0 0 19 3 38 #"    public String foo(String[] args) {"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 1 19 65 1 #"\t"
0 0 19 3 16 #"alias a1 = arg1;"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 1 19 65 1 #"\t"
0 0 19 3 56
#"var a1 = new String[](){(#\\\"#{args[0]}\\\" + #\\\"{a+b}\\\")};"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 1 19 65 1 #"\t"
0 0 19 3 21 #"return a1.toString();"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"    }"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
